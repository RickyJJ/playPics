{
  "code": "import { FrameAnimation } from \"../display/FrameAnimation\";\r\nimport { Graphics } from \"../display/Graphics\";\r\nimport { Matrix } from \"../maths/Matrix\";\r\nimport { Loader } from \"../net/Loader\";\r\nexport class GraphicAnimation extends FrameAnimation {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._nodeIDAniDic = {};\r\n    }\r\n    _parseNodeList(uiView) {\r\n        if (!this._nodeList)\r\n            this._nodeList = [];\r\n        this._nodeDefaultProps[uiView.compId] = uiView.props;\r\n        if (uiView.compId)\r\n            this._nodeList.push(uiView.compId);\r\n        var childs = uiView.child;\r\n        if (childs) {\r\n            var i, len = childs.length;\r\n            for (i = 0; i < len; i++) {\r\n                this._parseNodeList(childs[i]);\r\n            }\r\n        }\r\n    }\r\n    _calGraphicData(aniData) {\r\n        this._setUp(null, aniData);\r\n        this._createGraphicData();\r\n        if (this._nodeIDAniDic) {\r\n            var key;\r\n            for (key in this._nodeIDAniDic) {\r\n                this._nodeIDAniDic[key] = null;\r\n            }\r\n        }\r\n    }\r\n    _createGraphicData() {\r\n        var gList = [];\r\n        var i, len = this.count;\r\n        var animationDataNew = this._usedFrames;\r\n        if (!animationDataNew)\r\n            animationDataNew = [];\r\n        var preGraphic;\r\n        for (i = 0; i < len; i++) {\r\n            if (animationDataNew[i] || !preGraphic) {\r\n                preGraphic = this._createFrameGraphic(i);\r\n            }\r\n            gList.push(preGraphic);\r\n        }\r\n        this._gList = gList;\r\n    }\r\n    _createFrameGraphic(frame) {\r\n        var g = new Graphics();\r\n        if (!GraphicAnimation._rootMatrix)\r\n            GraphicAnimation._rootMatrix = new Matrix();\r\n        this._updateNodeGraphic(this._rootNode, frame, GraphicAnimation._rootMatrix, g);\r\n        return g;\r\n    }\r\n    _updateNodeGraphic(node, frame, parentTransfrom, g, alpha = 1) {\r\n        var tNodeG;\r\n        tNodeG = this._nodeGDic[node.compId] = this._getNodeGraphicData(node.compId, frame, this._nodeGDic[node.compId]);\r\n        if (!tNodeG.resultTransform)\r\n            tNodeG.resultTransform = new Matrix();\r\n        var tResultTransform;\r\n        tResultTransform = tNodeG.resultTransform;\r\n        Matrix.mul(tNodeG.transform, parentTransfrom, tResultTransform);\r\n        var tTex;\r\n        var tGraphicAlpha = tNodeG.alpha * alpha;\r\n        if (tGraphicAlpha < 0.01)\r\n            return;\r\n        if (tNodeG.skin) {\r\n            tTex = this._getTextureByUrl(tNodeG.skin);\r\n            if (tTex) {\r\n                if (tResultTransform._checkTransform()) {\r\n                    g.drawTexture(tTex, 0, 0, tNodeG.width, tNodeG.height, tResultTransform, tGraphicAlpha);\r\n                    tNodeG.resultTransform = null;\r\n                }\r\n                else {\r\n                    g.drawTexture(tTex, tResultTransform.tx, tResultTransform.ty, tNodeG.width, tNodeG.height, null, tGraphicAlpha);\r\n                }\r\n            }\r\n        }\r\n        var childs = node.child;\r\n        if (!childs)\r\n            return;\r\n        var i, len;\r\n        len = childs.length;\r\n        for (i = 0; i < len; i++) {\r\n            this._updateNodeGraphic(childs[i], frame, tResultTransform, g, tGraphicAlpha);\r\n        }\r\n    }\r\n    _updateNoChilds(tNodeG, g) {\r\n        if (!tNodeG.skin)\r\n            return;\r\n        var tTex = this._getTextureByUrl(tNodeG.skin);\r\n        if (!tTex)\r\n            return;\r\n        var tTransform = tNodeG.transform;\r\n        tTransform._checkTransform();\r\n        var onlyTranslate;\r\n        onlyTranslate = !tTransform._bTransform;\r\n        if (!onlyTranslate) {\r\n            g.drawTexture(tTex, 0, 0, tNodeG.width, tNodeG.height, tTransform.clone(), tNodeG.alpha);\r\n        }\r\n        else {\r\n            g.drawTexture(tTex, tTransform.tx, tTransform.ty, tNodeG.width, tNodeG.height, null, tNodeG.alpha);\r\n        }\r\n    }\r\n    _updateNodeGraphic2(node, frame, g) {\r\n        var tNodeG;\r\n        tNodeG = this._nodeGDic[node.compId] = this._getNodeGraphicData(node.compId, frame, this._nodeGDic[node.compId]);\r\n        if (!node.child) {\r\n            this._updateNoChilds(tNodeG, g);\r\n            return;\r\n        }\r\n        var tTransform = tNodeG.transform;\r\n        tTransform._checkTransform();\r\n        var onlyTranslate;\r\n        onlyTranslate = !tTransform._bTransform;\r\n        var hasTrans;\r\n        hasTrans = onlyTranslate && (tTransform.tx != 0 || tTransform.ty != 0);\r\n        var ifSave;\r\n        ifSave = (tTransform._bTransform) || tNodeG.alpha != 1;\r\n        if (ifSave)\r\n            g.save();\r\n        if (tNodeG.alpha != 1)\r\n            g.alpha(tNodeG.alpha);\r\n        if (!onlyTranslate)\r\n            g.transform(tTransform.clone());\r\n        else if (hasTrans)\r\n            g.translate(tTransform.tx, tTransform.ty);\r\n        var childs = node.child;\r\n        var tTex;\r\n        if (tNodeG.skin) {\r\n            tTex = this._getTextureByUrl(tNodeG.skin);\r\n            if (tTex) {\r\n                g.drawImage(tTex, 0, 0, tNodeG.width, tNodeG.height);\r\n            }\r\n        }\r\n        if (childs) {\r\n            var i, len;\r\n            len = childs.length;\r\n            for (i = 0; i < len; i++) {\r\n                this._updateNodeGraphic2(childs[i], frame, g);\r\n            }\r\n        }\r\n        if (ifSave) {\r\n            g.restore();\r\n        }\r\n        else {\r\n            if (!onlyTranslate) {\r\n                g.transform(tTransform.clone().invert());\r\n            }\r\n            else if (hasTrans) {\r\n                g.translate(-tTransform.tx, -tTransform.ty);\r\n            }\r\n        }\r\n    }\r\n    _calculateKeyFrames(node) {\r\n        super._calculateKeyFrames(node);\r\n        this._nodeIDAniDic[node.target] = node;\r\n    }\r\n    getNodeDataByID(nodeID) {\r\n        return this._nodeIDAniDic[nodeID];\r\n    }\r\n    _getParams(obj, params, frame, obj2) {\r\n        var rst = GraphicAnimation._temParam;\r\n        rst.length = params.length;\r\n        var i, len = params.length;\r\n        for (i = 0; i < len; i++) {\r\n            rst[i] = this._getObjVar(obj, params[i][0], frame, params[i][1], obj2);\r\n        }\r\n        return rst;\r\n    }\r\n    _getObjVar(obj, key, frame, noValue, obj2) {\r\n        if (key in obj) {\r\n            var vArr = obj[key];\r\n            if (frame >= vArr.length)\r\n                frame = vArr.length - 1;\r\n            return obj[key][frame];\r\n        }\r\n        if (key in obj2) {\r\n            return obj2[key];\r\n        }\r\n        return noValue;\r\n    }\r\n    _getNodeGraphicData(nodeID, frame, rst) {\r\n        if (!rst)\r\n            rst = new GraphicNode();\r\n        if (!rst.transform) {\r\n            rst.transform = new Matrix();\r\n        }\r\n        else {\r\n            rst.transform.identity();\r\n        }\r\n        var node = this.getNodeDataByID(nodeID);\r\n        if (!node)\r\n            return rst;\r\n        var frameData = node.frames;\r\n        var params = this._getParams(frameData, GraphicAnimation._drawTextureCmd, frame, this._nodeDefaultProps[nodeID]);\r\n        var url = params[0];\r\n        var width, height;\r\n        var px = params[5], py = params[6];\r\n        var aX = params[13], aY = params[14];\r\n        var sx = params[7], sy = params[8];\r\n        var rotate = params[9];\r\n        var skewX = params[11], skewY = params[12];\r\n        width = params[3];\r\n        height = params[4];\r\n        if (width == 0 || height == 0)\r\n            url = null;\r\n        if (width == -1)\r\n            width = 0;\r\n        if (height == -1)\r\n            height = 0;\r\n        var tex;\r\n        rst.skin = url;\r\n        rst.width = width;\r\n        rst.height = height;\r\n        if (url) {\r\n            tex = this._getTextureByUrl(url);\r\n            if (tex) {\r\n                if (!width)\r\n                    width = tex.sourceWidth;\r\n                if (!height)\r\n                    height = tex.sourceHeight;\r\n            }\r\n            else {\r\n                console.warn(\"lost skin:\", url, \",you may load pics first\");\r\n            }\r\n        }\r\n        rst.alpha = params[10];\r\n        var m = rst.transform;\r\n        if (aX != 0) {\r\n            px = aX * width;\r\n        }\r\n        if (aY != 0) {\r\n            py = aY * height;\r\n        }\r\n        if (px != 0 || py != 0) {\r\n            m.translate(-px, -py);\r\n        }\r\n        var tm = null;\r\n        if (rotate || sx !== 1 || sy !== 1 || skewX || skewY) {\r\n            tm = GraphicAnimation._tempMt;\r\n            tm.identity();\r\n            tm._bTransform = true;\r\n            var skx = (rotate - skewX) * 0.0174532922222222;\r\n            var sky = (rotate + skewY) * 0.0174532922222222;\r\n            var cx = Math.cos(sky);\r\n            var ssx = Math.sin(sky);\r\n            var cy = Math.sin(skx);\r\n            var ssy = Math.cos(skx);\r\n            tm.a = sx * cx;\r\n            tm.b = sx * ssx;\r\n            tm.c = -sy * cy;\r\n            tm.d = sy * ssy;\r\n            tm.tx = tm.ty = 0;\r\n        }\r\n        if (tm) {\r\n            m = Matrix.mul(m, tm, m);\r\n        }\r\n        m.translate(params[1], params[2]);\r\n        return rst;\r\n    }\r\n    _getTextureByUrl(url) {\r\n        return Loader.getRes(url);\r\n    }\r\n    setAniData(uiView, aniName = null) {\r\n        if (uiView.animations) {\r\n            this._nodeDefaultProps = {};\r\n            this._nodeGDic = {};\r\n            if (this._nodeList)\r\n                this._nodeList.length = 0;\r\n            this._rootNode = uiView;\r\n            this._parseNodeList(uiView);\r\n            var aniDic = {};\r\n            var anilist = [];\r\n            var animations = uiView.animations;\r\n            var i, len = animations.length;\r\n            var tAniO;\r\n            for (i = 0; i < len; i++) {\r\n                tAniO = animations[i];\r\n                this._labels = null;\r\n                if (aniName && aniName != tAniO.name) {\r\n                    continue;\r\n                }\r\n                if (!tAniO)\r\n                    continue;\r\n                try {\r\n                    this._calGraphicData(tAniO);\r\n                }\r\n                catch (e) {\r\n                    console.warn(\"parse animation fail:\" + tAniO.name + \",empty animation created\");\r\n                    this._gList = [];\r\n                }\r\n                var frameO = {};\r\n                frameO.interval = 1000 / tAniO[\"frameRate\"];\r\n                frameO.frames = this._gList;\r\n                frameO.labels = this._labels;\r\n                frameO.name = tAniO.name;\r\n                anilist.push(frameO);\r\n                aniDic[tAniO.name] = frameO;\r\n            }\r\n            this.animationList = anilist;\r\n            this.animationDic = aniDic;\r\n        }\r\n        GraphicAnimation._temParam.length = 0;\r\n    }\r\n    parseByData(aniData) {\r\n        var rootNode, aniO;\r\n        rootNode = aniData.nodeRoot;\r\n        aniO = aniData.aniO;\r\n        delete aniData.nodeRoot;\r\n        delete aniData.aniO;\r\n        this._nodeDefaultProps = {};\r\n        this._nodeGDic = {};\r\n        if (this._nodeList)\r\n            this._nodeList.length = 0;\r\n        this._rootNode = rootNode;\r\n        this._parseNodeList(rootNode);\r\n        this._labels = null;\r\n        try {\r\n            this._calGraphicData(aniO);\r\n        }\r\n        catch (e) {\r\n            console.warn(\"parse animation fail:\" + aniO.name + \",empty animation created\");\r\n            this._gList = [];\r\n        }\r\n        var frameO = aniData;\r\n        frameO.interval = 1000 / aniO[\"frameRate\"];\r\n        frameO.frames = this._gList;\r\n        frameO.labels = this._labels;\r\n        frameO.name = aniO.name;\r\n        return frameO;\r\n    }\r\n    setUpAniData(uiView) {\r\n        if (uiView.animations) {\r\n            var aniDic = {};\r\n            var anilist = [];\r\n            var animations = uiView.animations;\r\n            var i, len = animations.length;\r\n            var tAniO;\r\n            for (i = 0; i < len; i++) {\r\n                tAniO = animations[i];\r\n                if (!tAniO)\r\n                    continue;\r\n                var frameO = {};\r\n                frameO.name = tAniO.name;\r\n                frameO.aniO = tAniO;\r\n                frameO.nodeRoot = uiView;\r\n                anilist.push(frameO);\r\n                aniDic[tAniO.name] = frameO;\r\n            }\r\n            this.animationList = anilist;\r\n            this.animationDic = aniDic;\r\n        }\r\n    }\r\n    _clear() {\r\n        this.animationList = null;\r\n        this.animationDic = null;\r\n        this._gList = null;\r\n        this._nodeGDic = null;\r\n    }\r\n    static parseAnimationByData(animationObject) {\r\n        if (!GraphicAnimation._I)\r\n            GraphicAnimation._I = new GraphicAnimation();\r\n        var rst;\r\n        rst = GraphicAnimation._I.parseByData(animationObject);\r\n        GraphicAnimation._I._clear();\r\n        return rst;\r\n    }\r\n    static parseAnimationData(aniData) {\r\n        if (!GraphicAnimation._I)\r\n            GraphicAnimation._I = new GraphicAnimation();\r\n        GraphicAnimation._I.setUpAniData(aniData);\r\n        var rst;\r\n        rst = {};\r\n        rst.animationList = GraphicAnimation._I.animationList;\r\n        rst.animationDic = GraphicAnimation._I.animationDic;\r\n        GraphicAnimation._I._clear();\r\n        return rst;\r\n    }\r\n}\r\nGraphicAnimation._drawTextureCmd = [[\"skin\", null], [\"x\", 0], [\"y\", 0], [\"width\", -1], [\"height\", -1], [\"pivotX\", 0], [\"pivotY\", 0], [\"scaleX\", 1], [\"scaleY\", 1], [\"rotation\", 0], [\"alpha\", 1], [\"skewX\", 0], [\"skewY\", 0], [\"anchorX\", 0], [\"anchorY\", 0]];\r\nGraphicAnimation._temParam = [];\r\nGraphicAnimation._tempMt = new Matrix();\r\nclass GraphicNode {\r\n    constructor() {\r\n        this.alpha = 1;\r\n    }\r\n}\r\n",
  "references": [
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/display/FrameAnimation.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/display/Graphics.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/maths/Matrix.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/net/Loader.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/resource/Texture.ts"
  ]
}
