{
  "code": "import { Loader } from \"./Loader\";\r\nimport { URL } from \"./URL\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Texture2D } from \"../resource/Texture2D\";\r\nexport class WorkerLoader extends EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this.worker = new Worker(WorkerLoader.workerPath);\r\n        let me = this;\r\n        this.worker.onmessage = function (evt) {\r\n            me.workerMessage(evt.data);\r\n        };\r\n    }\r\n    static __init__() {\r\n        if (WorkerLoader._preLoadFun != null)\r\n            return false;\r\n        if (!Worker)\r\n            return false;\r\n        WorkerLoader._preLoadFun = Loader[\"prototype\"][\"_loadImage\"];\r\n        Loader[\"prototype\"][\"_loadImage\"] = WorkerLoader[\"prototype\"][\"_loadImage\"];\r\n        if (!WorkerLoader.I)\r\n            WorkerLoader.I = new WorkerLoader();\r\n        return true;\r\n    }\r\n    static workerSupported() {\r\n        return Worker ? true : false;\r\n    }\r\n    static enableWorkerLoader() {\r\n        if (!WorkerLoader._tryEnabled) {\r\n            WorkerLoader.enable = true;\r\n            WorkerLoader._tryEnabled = true;\r\n        }\r\n    }\r\n    static set enable(value) {\r\n        if (WorkerLoader._enable != value) {\r\n            WorkerLoader._enable = value;\r\n            if (value && WorkerLoader._preLoadFun == null)\r\n                WorkerLoader._enable = WorkerLoader.__init__();\r\n        }\r\n    }\r\n    static get enable() {\r\n        return WorkerLoader._enable;\r\n    }\r\n    workerMessage(data) {\r\n        if (data) {\r\n            switch (data.type) {\r\n                case \"Image\":\r\n                    this.imageLoaded(data);\r\n                    break;\r\n                case \"Disable\":\r\n                    WorkerLoader.enable = false;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    imageLoaded(data) {\r\n        if (!data.dataType || data.dataType != \"imageBitmap\") {\r\n            this.event(data.url, null);\r\n            return;\r\n        }\r\n        var imageData = data.imageBitmap;\r\n        var tex = new Texture2D();\r\n        tex.loadImageSource(imageData);\r\n        console.log(\"load:\", data.url);\r\n        this.event(data.url, tex);\r\n    }\r\n    loadImage(url) {\r\n        this.worker.postMessage(url);\r\n    }\r\n    _loadImage(url) {\r\n        var _this = this;\r\n        if (!this._useWorkerLoader || !WorkerLoader._enable) {\r\n            WorkerLoader._preLoadFun.call(_this, url);\r\n            return;\r\n        }\r\n        url = URL.formatURL(url);\r\n        function clear() {\r\n            WorkerLoader.I.off(url, _this, onload);\r\n        }\r\n        var onload = function (image) {\r\n            clear();\r\n            if (image) {\r\n                _this[\"onLoaded\"](image);\r\n            }\r\n            else {\r\n                WorkerLoader._preLoadFun.call(_this, url);\r\n            }\r\n        };\r\n        WorkerLoader.I.on(url, _this, onload);\r\n        WorkerLoader.I.loadImage(url);\r\n    }\r\n}\r\nWorkerLoader.workerPath = \"libs/workerloader.js\";\r\nWorkerLoader._enable = false;\r\nWorkerLoader._tryEnabled = false;\r\n",
  "references": [
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/net/Loader.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/net/URL.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/events/EventDispatcher.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/resource/Texture2D.ts"
  ]
}
