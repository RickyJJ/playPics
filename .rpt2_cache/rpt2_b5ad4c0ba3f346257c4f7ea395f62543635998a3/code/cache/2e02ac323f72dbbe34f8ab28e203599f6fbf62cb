{
  "code": "import { RigidBody } from \"./RigidBody\";\r\nimport { Laya } from \"../../Laya\";\r\nimport { Event } from \"../events/Event\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { IPhysics } from \"./IPhysics\";\r\nexport class Physics extends EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this.box2d = window.box2d;\r\n        this.velocityIterations = 8;\r\n        this.positionIterations = 3;\r\n        this._eventList = [];\r\n    }\r\n    static get I() {\r\n        return Physics._I || (Physics._I = new Physics());\r\n    }\r\n    static enable(options = null) {\r\n        Physics.I.start(options);\r\n        IPhysics.RigidBody = RigidBody;\r\n        IPhysics.Physics = this;\r\n    }\r\n    start(options = null) {\r\n        if (!this._enabled) {\r\n            this._enabled = true;\r\n            options || (options = {});\r\n            var box2d = window.box2d;\r\n            if (box2d == null) {\r\n                console.error(\"Can not find box2d libs, you should reuqest box2d.js first.\");\r\n                return;\r\n            }\r\n            var gravity = new box2d.b2Vec2(0, options.gravity || 500 / Physics.PIXEL_RATIO);\r\n            this.world = new box2d.b2World(gravity);\r\n            this.world.SetContactListener(new ContactListener());\r\n            this.allowSleeping = options.allowSleeping == null ? true : options.allowSleeping;\r\n            if (!options.customUpdate)\r\n                Laya.physicsTimer.frameLoop(1, this, this._update);\r\n            this._emptyBody = this._createBody(new window.box2d.b2BodyDef());\r\n        }\r\n    }\r\n    _update() {\r\n        this.world.Step(1 / 60, this.velocityIterations, this.positionIterations, 3);\r\n        var len = this._eventList.length;\r\n        if (len > 0) {\r\n            for (var i = 0; i < len; i += 2) {\r\n                this._sendEvent(this._eventList[i], this._eventList[i + 1]);\r\n            }\r\n            this._eventList.length = 0;\r\n        }\r\n    }\r\n    _sendEvent(type, contact) {\r\n        var colliderA = contact.GetFixtureA().collider;\r\n        var colliderB = contact.GetFixtureB().collider;\r\n        var ownerA = colliderA.owner;\r\n        var ownerB = colliderB.owner;\r\n        contact.getHitInfo = function () {\r\n            var manifold = new this.box2d.b2WorldManifold();\r\n            this.GetWorldManifold(manifold);\r\n            var p = manifold.points[0];\r\n            p.x *= Physics.PIXEL_RATIO;\r\n            p.y *= Physics.PIXEL_RATIO;\r\n            return manifold;\r\n        };\r\n        if (ownerA) {\r\n            var args = [colliderB, colliderA, contact];\r\n            if (type === 0) {\r\n                ownerA.event(Event.TRIGGER_ENTER, args);\r\n                if (!ownerA[\"_triggered\"]) {\r\n                    ownerA[\"_triggered\"] = true;\r\n                }\r\n                else {\r\n                    ownerA.event(Event.TRIGGER_STAY, args);\r\n                }\r\n            }\r\n            else {\r\n                ownerA[\"_triggered\"] = false;\r\n                ownerA.event(Event.TRIGGER_EXIT, args);\r\n            }\r\n        }\r\n        if (ownerB) {\r\n            args = [colliderA, colliderB, contact];\r\n            if (type === 0) {\r\n                ownerB.event(Event.TRIGGER_ENTER, args);\r\n                if (!ownerB[\"_triggered\"]) {\r\n                    ownerB[\"_triggered\"] = true;\r\n                }\r\n                else {\r\n                    ownerB.event(Event.TRIGGER_STAY, args);\r\n                }\r\n            }\r\n            else {\r\n                ownerB[\"_triggered\"] = false;\r\n                ownerB.event(Event.TRIGGER_EXIT, args);\r\n            }\r\n        }\r\n    }\r\n    _createBody(def) {\r\n        if (this.world) {\r\n            return this.world.CreateBody(def);\r\n        }\r\n        else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n            return null;\r\n        }\r\n    }\r\n    _removeBody(body) {\r\n        if (this.world) {\r\n            this.world.DestroyBody(body);\r\n        }\r\n        else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n        }\r\n    }\r\n    _createJoint(def) {\r\n        if (this.world) {\r\n            return this.world.CreateJoint(def);\r\n        }\r\n        else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n            return null;\r\n        }\r\n    }\r\n    _removeJoint(joint) {\r\n        if (this.world) {\r\n            this.world.DestroyJoint(joint);\r\n        }\r\n        else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n        }\r\n    }\r\n    stop() {\r\n        Laya.physicsTimer.clear(this, this._update);\r\n    }\r\n    get allowSleeping() {\r\n        return this.world.GetAllowSleeping();\r\n    }\r\n    set allowSleeping(value) {\r\n        this.world.SetAllowSleeping(value);\r\n    }\r\n    get gravity() {\r\n        return this.world.GetGravity();\r\n    }\r\n    set gravity(value) {\r\n        this.world.SetGravity(value);\r\n    }\r\n    getBodyCount() {\r\n        return this.world.GetBodyCount();\r\n    }\r\n    getContactCount() {\r\n        return this.world.GetContactCount();\r\n    }\r\n    getJointCount() {\r\n        return this.world.GetJointCount();\r\n    }\r\n    get worldRoot() {\r\n        return this._worldRoot || Laya.stage;\r\n    }\r\n    set worldRoot(value) {\r\n        this._worldRoot = value;\r\n        if (value) {\r\n            var p = value.localToGlobal(Point.TEMP.setTo(0, 0));\r\n            this.world.ShiftOrigin({ x: p.x / Physics.PIXEL_RATIO, y: p.y / Physics.PIXEL_RATIO });\r\n        }\r\n    }\r\n}\r\nPhysics.PIXEL_RATIO = 50;\r\nClassUtils.regClass(\"laya.physics.Physics\", Physics);\r\nClassUtils.regClass(\"Laya.Physics\", Physics);\r\nclass ContactListener {\r\n    BeginContact(contact) {\r\n        Physics.I._eventList.push(0, contact);\r\n    }\r\n    EndContact(contact) {\r\n        Physics.I._eventList.push(1, contact);\r\n    }\r\n    PreSolve(contact, oldManifold) {\r\n    }\r\n    PostSolve(contact, impulse) {\r\n    }\r\n}\r\n",
  "references": [
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/BoxCollider.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/ChainCollider.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/CircleCollider.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/PolygonCollider.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/RigidBody.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/PhysicsDebugDraw.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/Laya.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/display/Sprite.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/events/Event.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/events/EventDispatcher.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/maths/Point.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/DistanceJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/GearJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/MotorJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/MouseJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/PrismaticJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/PulleyJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/RevoluteJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/RopeJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/WeldJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/joint/WheelJoint.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/utils/ClassUtils.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/physics/IPhysics.ts"
  ]
}
