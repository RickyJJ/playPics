{
  "code": "import { AnimationBase } from \"./AnimationBase\";\r\nimport { Graphics } from \"./Graphics\";\r\nimport { Loader } from \"../net/Loader\";\r\nimport { GraphicAnimation } from \"../utils/GraphicAnimation\";\r\nimport { Handler } from \"../utils/Handler\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class Animation extends AnimationBase {\r\n    constructor() {\r\n        super();\r\n        this._setControlNode(this);\r\n    }\r\n    destroy(destroyChild = true) {\r\n        this.stop();\r\n        super.destroy(destroyChild);\r\n        this._frames = null;\r\n        this._labels = null;\r\n    }\r\n    play(start = 0, loop = true, name = \"\") {\r\n        if (name)\r\n            this._setFramesFromCache(name, true);\r\n        super.play(start, loop, name);\r\n    }\r\n    _setFramesFromCache(name, showWarn = false) {\r\n        if (this._url)\r\n            name = this._url + \"#\" + name;\r\n        if (name && Animation.framesMap[name]) {\r\n            var tAniO = Animation.framesMap[name];\r\n            if (tAniO instanceof Array) {\r\n                this._frames = Animation.framesMap[name];\r\n                this._count = this._frames.length;\r\n            }\r\n            else {\r\n                if (tAniO.nodeRoot) {\r\n                    Animation.framesMap[name] = GraphicAnimation.parseAnimationByData(tAniO);\r\n                    tAniO = Animation.framesMap[name];\r\n                }\r\n                this._frames = tAniO.frames;\r\n                this._count = this._frames.length;\r\n                if (!this._frameRateChanged)\r\n                    this._interval = tAniO.interval;\r\n                this._labels = this._copyLabels(tAniO.labels);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            if (showWarn)\r\n                console.log(\"ani not found:\", name);\r\n        }\r\n        return false;\r\n    }\r\n    _copyLabels(labels) {\r\n        if (!labels)\r\n            return null;\r\n        var rst;\r\n        rst = {};\r\n        var key;\r\n        for (key in labels) {\r\n            rst[key] = Utils.copyArray([], labels[key]);\r\n        }\r\n        return rst;\r\n    }\r\n    _frameLoop() {\r\n        if (this._visible && this._style.alpha > 0.01 && this._frames) {\r\n            super._frameLoop();\r\n        }\r\n    }\r\n    _displayToIndex(value) {\r\n        if (this._frames)\r\n            this.graphics = this._frames[value];\r\n    }\r\n    get frames() {\r\n        return this._frames;\r\n    }\r\n    set frames(value) {\r\n        this._frames = value;\r\n        if (value) {\r\n            this._count = value.length;\r\n            if (this._actionName)\r\n                this._setFramesFromCache(this._actionName, true);\r\n            this.index = this._index;\r\n        }\r\n    }\r\n    set source(value) {\r\n        if (value.indexOf(\".ani\") > -1)\r\n            this.loadAnimation(value);\r\n        else if (value.indexOf(\".json\") > -1 || value.indexOf(\"als\") > -1 || value.indexOf(\"atlas\") > -1)\r\n            this.loadAtlas(value);\r\n        else\r\n            this.loadImages(value.split(\",\"));\r\n    }\r\n    set autoAnimation(value) {\r\n        this.play(0, true, value);\r\n    }\r\n    set autoPlay(value) {\r\n        if (value)\r\n            this.play();\r\n        else\r\n            this.stop();\r\n    }\r\n    clear() {\r\n        super.clear();\r\n        this.stop();\r\n        this.graphics = null;\r\n        this._frames = null;\r\n        this._labels = null;\r\n        return this;\r\n    }\r\n    loadImages(urls, cacheName = \"\") {\r\n        this._url = \"\";\r\n        if (!this._setFramesFromCache(cacheName)) {\r\n            this.frames = Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] : Animation.createFrames(urls, cacheName);\r\n        }\r\n        return this;\r\n    }\r\n    loadAtlas(url, loaded = null, cacheName = \"\") {\r\n        this._url = \"\";\r\n        var _this = this;\r\n        if (!_this._setFramesFromCache(cacheName)) {\r\n            function onLoaded(loadUrl) {\r\n                if (url === loadUrl) {\r\n                    _this.frames = Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] : Animation.createFrames(url, cacheName);\r\n                    if (loaded)\r\n                        loaded.run();\r\n                }\r\n            }\r\n            if (Loader.getAtlas(url))\r\n                onLoaded(url);\r\n            else\r\n                ILaya.loader.load(url, Handler.create(null, onLoaded, [url]), null, Loader.ATLAS);\r\n        }\r\n        return this;\r\n    }\r\n    loadAnimation(url, loaded = null, atlas = null) {\r\n        this._url = url;\r\n        var _this = this;\r\n        if (!this._actionName)\r\n            this._actionName = \"\";\r\n        if (!_this._setFramesFromCache(this._actionName)) {\r\n            if (!atlas || Loader.getAtlas(atlas)) {\r\n                this._loadAnimationData(url, loaded, atlas);\r\n            }\r\n            else {\r\n                ILaya.loader.load(atlas, Handler.create(this, this._loadAnimationData, [url, loaded, atlas]), null, Loader.ATLAS);\r\n            }\r\n        }\r\n        else {\r\n            _this._setFramesFromCache(this._actionName, true);\r\n            this.index = 0;\r\n            if (loaded)\r\n                loaded.run();\r\n        }\r\n        return this;\r\n    }\r\n    _loadAnimationData(url, loaded = null, atlas = null) {\r\n        if (atlas && !Loader.getAtlas(atlas)) {\r\n            console.warn(\"atlas load fail:\" + atlas);\r\n            return;\r\n        }\r\n        var _this = this;\r\n        function onLoaded(loadUrl) {\r\n            if (!Loader.getRes(loadUrl)) {\r\n                if (Animation.framesMap[url + \"#\"]) {\r\n                    _this._setFramesFromCache(_this._actionName, true);\r\n                    _this.index = 0;\r\n                    _this._resumePlay();\r\n                    if (loaded)\r\n                        loaded.run();\r\n                }\r\n                return;\r\n            }\r\n            if (url === loadUrl) {\r\n                var tAniO;\r\n                if (!Animation.framesMap[url + \"#\"]) {\r\n                    var aniData = GraphicAnimation.parseAnimationData(Loader.getRes(url));\r\n                    if (!aniData)\r\n                        return;\r\n                    var aniList = aniData.animationList;\r\n                    var i, len = aniList.length;\r\n                    var defaultO;\r\n                    for (i = 0; i < len; i++) {\r\n                        tAniO = aniList[i];\r\n                        Animation.framesMap[url + \"#\" + tAniO.name] = tAniO;\r\n                        if (!defaultO)\r\n                            defaultO = tAniO;\r\n                    }\r\n                    if (defaultO) {\r\n                        Animation.framesMap[url + \"#\"] = defaultO;\r\n                        _this._setFramesFromCache(_this._actionName, true);\r\n                        _this.index = 0;\r\n                    }\r\n                    _this._resumePlay();\r\n                }\r\n                else {\r\n                    _this._setFramesFromCache(_this._actionName, true);\r\n                    _this.index = 0;\r\n                    _this._resumePlay();\r\n                }\r\n                if (loaded)\r\n                    loaded.run();\r\n            }\r\n            Loader.clearRes(url);\r\n        }\r\n        if (Loader.getRes(url))\r\n            onLoaded(url);\r\n        else\r\n            ILaya.loader.load(url, Handler.create(null, onLoaded, [url]), null, Loader.JSON);\r\n    }\r\n    static createFrames(url, name) {\r\n        var arr;\r\n        if (typeof (url) == 'string') {\r\n            var atlas = Loader.getAtlas(url);\r\n            if (atlas && atlas.length) {\r\n                arr = [];\r\n                for (var i = 0, n = atlas.length; i < n; i++) {\r\n                    var g = new Graphics();\r\n                    g.drawImage(Loader.getRes(atlas[i]), 0, 0);\r\n                    arr.push(g);\r\n                }\r\n            }\r\n        }\r\n        else if (url instanceof Array) {\r\n            arr = [];\r\n            for (i = 0, n = url.length; i < n; i++) {\r\n                g = new Graphics();\r\n                g.loadImage(url[i], 0, 0);\r\n                arr.push(g);\r\n            }\r\n        }\r\n        if (name)\r\n            Animation.framesMap[name] = arr;\r\n        return arr;\r\n    }\r\n    static clearCache(key) {\r\n        var cache = Animation.framesMap;\r\n        var val;\r\n        var key2 = key + \"#\";\r\n        for (val in cache) {\r\n            if (val === key || val.indexOf(key2) === 0) {\r\n                delete Animation.framesMap[val];\r\n            }\r\n        }\r\n    }\r\n}\r\nAnimation.framesMap = {};\r\nILaya.regClass(Animation);\r\nClassUtils.regClass(\"laya.display.Animation\", Animation);\r\nClassUtils.regClass(\"Laya.Animation\", Animation);\r\n",
  "references": [
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/display/AnimationBase.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/display/Graphics.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/net/Loader.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/utils/GraphicAnimation.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/utils/Handler.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/utils/Utils.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/ILaya.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/utils/ClassUtils.ts"
  ]
}
