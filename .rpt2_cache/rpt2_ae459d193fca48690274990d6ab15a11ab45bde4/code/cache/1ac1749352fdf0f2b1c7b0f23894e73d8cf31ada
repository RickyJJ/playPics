{
  "code": "import { Component } from \"../components/Component\";\r\nimport { Event } from \"../events/Event\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class Widget extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._top = NaN;\r\n        this._bottom = NaN;\r\n        this._left = NaN;\r\n        this._right = NaN;\r\n        this._centerX = NaN;\r\n        this._centerY = NaN;\r\n    }\r\n    onReset() {\r\n        this._top = this._bottom = this._left = this._right = this._centerX = this._centerY = NaN;\r\n    }\r\n    _onEnable() {\r\n        if (this.owner.parent)\r\n            this._onAdded();\r\n        else\r\n            this.owner.once(Event.ADDED, this, this._onAdded);\r\n    }\r\n    _onDisable() {\r\n        this.owner.off(Event.ADDED, this, this._onAdded);\r\n        if (this.owner.parent)\r\n            this.owner.parent.off(Event.RESIZE, this, this._onParentResize);\r\n    }\r\n    _onAdded() {\r\n        if (this.owner.parent)\r\n            this.owner.parent.on(Event.RESIZE, this, this._onParentResize);\r\n        this.resetLayoutX();\r\n        this.resetLayoutY();\r\n    }\r\n    _onParentResize() {\r\n        if (this.resetLayoutX() || this.resetLayoutY())\r\n            this.owner.event(Event.RESIZE);\r\n    }\r\n    resetLayoutX() {\r\n        var owner = this.owner;\r\n        if (!owner)\r\n            return false;\r\n        var parent = owner.parent;\r\n        if (parent) {\r\n            if (!isNaN(this.centerX)) {\r\n                owner.x = Math.round((parent.width - owner.displayWidth) * 0.5 + this.centerX + owner.pivotX * owner.scaleX);\r\n            }\r\n            else if (!isNaN(this.left)) {\r\n                owner.x = Math.round(this.left + owner.pivotX * owner.scaleX);\r\n                if (!isNaN(this.right)) {\r\n                    var temp = (parent._width - this.left - this.right) / (owner.scaleX || 0.01);\r\n                    if (temp != owner.width) {\r\n                        owner.width = temp;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            else if (!isNaN(this.right)) {\r\n                owner.x = Math.round(parent.width - owner.displayWidth - this.right + owner.pivotX * owner.scaleX);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    resetLayoutY() {\r\n        var owner = this.owner;\r\n        if (!owner)\r\n            return false;\r\n        var parent = owner.parent;\r\n        if (parent) {\r\n            if (!isNaN(this.centerY)) {\r\n                owner.y = Math.round((parent.height - owner.displayHeight) * 0.5 + this.centerY + owner.pivotY * owner.scaleY);\r\n            }\r\n            else if (!isNaN(this.top)) {\r\n                owner.y = Math.round(this.top + owner.pivotY * owner.scaleY);\r\n                if (!isNaN(this.bottom)) {\r\n                    var temp = (parent._height - this.top - this.bottom) / (owner.scaleY || 0.01);\r\n                    if (temp != owner.height) {\r\n                        owner.height = temp;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            else if (!isNaN(this.bottom)) {\r\n                owner.y = Math.round(parent.height - owner.displayHeight - this.bottom + owner.pivotY * owner.scaleY);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    resetLayout() {\r\n        if (this.owner) {\r\n            this.resetLayoutX();\r\n            this.resetLayoutY();\r\n        }\r\n    }\r\n    get top() {\r\n        return this._top;\r\n    }\r\n    set top(value) {\r\n        if (this._top != value) {\r\n            this._top = value;\r\n            this.resetLayoutY();\r\n        }\r\n    }\r\n    get bottom() {\r\n        return this._bottom;\r\n    }\r\n    set bottom(value) {\r\n        if (this._bottom != value) {\r\n            this._bottom = value;\r\n            this.resetLayoutY();\r\n        }\r\n    }\r\n    get left() {\r\n        return this._left;\r\n    }\r\n    set left(value) {\r\n        if (this._left != value) {\r\n            this._left = value;\r\n            this.resetLayoutX();\r\n        }\r\n    }\r\n    get right() {\r\n        return this._right;\r\n    }\r\n    set right(value) {\r\n        if (this._right != value) {\r\n            this._right = value;\r\n            this.resetLayoutX();\r\n        }\r\n    }\r\n    get centerX() {\r\n        return this._centerX;\r\n    }\r\n    set centerX(value) {\r\n        if (this._centerX != value) {\r\n            this._centerX = value;\r\n            this.resetLayoutX();\r\n        }\r\n    }\r\n    get centerY() {\r\n        return this._centerY;\r\n    }\r\n    set centerY(value) {\r\n        if (this._centerY != value) {\r\n            this._centerY = value;\r\n            this.resetLayoutY();\r\n        }\r\n    }\r\n}\r\nWidget.EMPTY = null;\r\nILaya.regClass(Widget);\r\nWidget.EMPTY = new Widget();\r\nClassUtils.regClass(\"laya.ui.Widget\", Widget);\r\nClassUtils.regClass(\"Laya.Widget\", Widget);\r\n",
  "references": [
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/components/Component.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/display/Sprite.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/events/Event.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/ILaya.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/utils/ClassUtils.ts"
  ]
}
