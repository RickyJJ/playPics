{
  "code": "import { LayaGL } from \"../layagl/LayaGL\";\r\nimport { WebGLContext } from \"../webgl/WebGLContext\";\r\nimport { Bitmap } from \"./Bitmap\";\r\nimport { TextureFormat } from \"./TextureFormat\";\r\nexport class BaseTexture extends Bitmap {\r\n    constructor(format, mipMap) {\r\n        super();\r\n        this._wrapModeU = BaseTexture.WARPMODE_REPEAT;\r\n        this._wrapModeV = BaseTexture.WARPMODE_REPEAT;\r\n        this._filterMode = BaseTexture.FILTERMODE_BILINEAR;\r\n        this._readyed = false;\r\n        this._width = -1;\r\n        this._height = -1;\r\n        this._format = format;\r\n        this._mipmap = mipMap;\r\n        this._anisoLevel = 1;\r\n        this._glTexture = LayaGL.instance.createTexture();\r\n    }\r\n    get mipmap() {\r\n        return this._mipmap;\r\n    }\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    get wrapModeU() {\r\n        return this._wrapModeU;\r\n    }\r\n    set wrapModeU(value) {\r\n        if (this._wrapModeU !== value) {\r\n            this._wrapModeU = value;\r\n            (this._width !== -1) && (this._setWarpMode(LayaGL.instance.TEXTURE_WRAP_S, value));\r\n        }\r\n    }\r\n    get wrapModeV() {\r\n        return this._wrapModeV;\r\n    }\r\n    set wrapModeV(value) {\r\n        if (this._wrapModeV !== value) {\r\n            this._wrapModeV = value;\r\n            (this._height !== -1) && (this._setWarpMode(LayaGL.instance.TEXTURE_WRAP_T, value));\r\n        }\r\n    }\r\n    get filterMode() {\r\n        return this._filterMode;\r\n    }\r\n    set filterMode(value) {\r\n        if (value !== this._filterMode) {\r\n            this._filterMode = value;\r\n            ((this._width !== -1) && (this._height !== -1)) && (this._setFilterMode(value));\r\n        }\r\n    }\r\n    get anisoLevel() {\r\n        return this._anisoLevel;\r\n    }\r\n    set anisoLevel(value) {\r\n        if (value !== this._anisoLevel) {\r\n            this._anisoLevel = Math.max(1, Math.min(16, value));\r\n            ((this._width !== -1) && (this._height !== -1)) && (this._setAnisotropy(value));\r\n        }\r\n    }\r\n    get mipmapCount() {\r\n        return this._mipmapCount;\r\n    }\r\n    get defaulteTexture() {\r\n        throw \"BaseTexture:must override it.\";\r\n    }\r\n    _getFormatByteCount() {\r\n        switch (this._format) {\r\n            case TextureFormat.R8G8B8:\r\n                return 3;\r\n            case TextureFormat.R8G8B8A8:\r\n                return 4;\r\n            case TextureFormat.Alpha8:\r\n                return 1;\r\n            case TextureFormat.R32G32B32A32:\r\n                return 4;\r\n            default:\r\n                throw \"Texture2D: unknown format.\";\r\n        }\r\n    }\r\n    _isPot(size) {\r\n        return (size & (size - 1)) === 0;\r\n    }\r\n    _getGLFormat() {\r\n        var glFormat;\r\n        var gl = LayaGL.instance;\r\n        var gpu = LayaGL.layaGPUInstance;\r\n        switch (this._format) {\r\n            case TextureFormat.R8G8B8:\r\n                glFormat = gl.RGB;\r\n                break;\r\n            case TextureFormat.R8G8B8A8:\r\n                glFormat = gl.RGBA;\r\n                break;\r\n            case TextureFormat.Alpha8:\r\n                glFormat = gl.ALPHA;\r\n                break;\r\n            case TextureFormat.R32G32B32A32:\r\n                glFormat = gl.RGBA;\r\n                break;\r\n            case TextureFormat.DXT1:\r\n                if (gpu._compressedTextureS3tc)\r\n                    glFormat = gpu._compressedTextureS3tc.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n                else\r\n                    throw \"BaseTexture: not support DXT1 format.\";\r\n                break;\r\n            case TextureFormat.DXT5:\r\n                if (gpu._compressedTextureS3tc)\r\n                    glFormat = gpu._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n                else\r\n                    throw \"BaseTexture: not support DXT5 format.\";\r\n                break;\r\n            case TextureFormat.ETC1RGB:\r\n                if (gpu._compressedTextureEtc1)\r\n                    glFormat = gpu._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL;\r\n                else\r\n                    throw \"BaseTexture: not support ETC1RGB format.\";\r\n                break;\r\n            case TextureFormat.PVRTCRGB_2BPPV:\r\n                if (gpu._compressedTexturePvrtc)\r\n                    glFormat = gpu._compressedTexturePvrtc.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGB_2BPPV format.\";\r\n                break;\r\n            case TextureFormat.PVRTCRGBA_2BPPV:\r\n                if (gpu._compressedTexturePvrtc)\r\n                    glFormat = gpu._compressedTexturePvrtc.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGBA_2BPPV format.\";\r\n                break;\r\n            case TextureFormat.PVRTCRGB_4BPPV:\r\n                if (gpu._compressedTexturePvrtc)\r\n                    glFormat = gpu._compressedTexturePvrtc.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGB_4BPPV format.\";\r\n                break;\r\n            case TextureFormat.PVRTCRGBA_4BPPV:\r\n                if (gpu._compressedTexturePvrtc)\r\n                    glFormat = gpu._compressedTexturePvrtc.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGBA_4BPPV format.\";\r\n                break;\r\n            default:\r\n                throw \"BaseTexture: unknown texture format.\";\r\n        }\r\n        return glFormat;\r\n    }\r\n    _setFilterMode(value) {\r\n        var gl = LayaGL.instance;\r\n        WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n        switch (value) {\r\n            case BaseTexture.FILTERMODE_POINT:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n                gl.texParameteri(this._glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n                break;\r\n            case BaseTexture.FILTERMODE_BILINEAR:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                gl.texParameteri(this._glTextureType, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                break;\r\n            case BaseTexture.FILTERMODE_TRILINEAR:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                gl.texParameteri(this._glTextureType, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                break;\r\n            default:\r\n                throw new Error(\"BaseTexture:unknown filterMode value.\");\r\n        }\r\n    }\r\n    _setWarpMode(orientation, mode) {\r\n        var gl = LayaGL.instance;\r\n        WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n        if (this._isPot(this._width) && this._isPot(this._height)) {\r\n            switch (mode) {\r\n                case BaseTexture.WARPMODE_REPEAT:\r\n                    gl.texParameteri(this._glTextureType, orientation, gl.REPEAT);\r\n                    break;\r\n                case BaseTexture.WARPMODE_CLAMP:\r\n                    gl.texParameteri(this._glTextureType, orientation, gl.CLAMP_TO_EDGE);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            gl.texParameteri(this._glTextureType, orientation, gl.CLAMP_TO_EDGE);\r\n        }\r\n    }\r\n    _setAnisotropy(value) {\r\n        var anisotropic = LayaGL.layaGPUInstance._extTextureFilterAnisotropic;\r\n        if (anisotropic) {\r\n            value = Math.max(value, 1);\r\n            var gl = LayaGL.instance;\r\n            WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n            value = Math.min(gl.getParameter(anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT), value);\r\n            gl.texParameterf(this._glTextureType, anisotropic.TEXTURE_MAX_ANISOTROPY_EXT, value);\r\n        }\r\n    }\r\n    _disposeResource() {\r\n        if (this._glTexture) {\r\n            LayaGL.instance.deleteTexture(this._glTexture);\r\n            this._glTexture = null;\r\n            this._setGPUMemory(0);\r\n        }\r\n    }\r\n    _getSource() {\r\n        if (this._readyed)\r\n            return this._glTexture;\r\n        else\r\n            return null;\r\n    }\r\n    generateMipmap() {\r\n        if (this._isPot(this.width) && this._isPot(this.height))\r\n            LayaGL.instance.generateMipmap(this._glTextureType);\r\n    }\r\n}\r\nBaseTexture.WARPMODE_REPEAT = 0;\r\nBaseTexture.WARPMODE_CLAMP = 1;\r\nBaseTexture.FILTERMODE_POINT = 0;\r\nBaseTexture.FILTERMODE_BILINEAR = 1;\r\nBaseTexture.FILTERMODE_TRILINEAR = 2;\r\nBaseTexture.FORMAT_R8G8B8 = 0;\r\nBaseTexture.FORMAT_R8G8B8A8 = 1;\r\nBaseTexture.FORMAT_ALPHA8 = 2;\r\nBaseTexture.FORMAT_DXT1 = 3;\r\nBaseTexture.FORMAT_DXT5 = 4;\r\nBaseTexture.FORMAT_ETC1RGB = 5;\r\nBaseTexture.FORMAT_PVRTCRGB_2BPPV = 9;\r\nBaseTexture.FORMAT_PVRTCRGBA_2BPPV = 10;\r\nBaseTexture.FORMAT_PVRTCRGB_4BPPV = 11;\r\nBaseTexture.FORMAT_PVRTCRGBA_4BPPV = 12;\r\nBaseTexture.RENDERTEXTURE_FORMAT_RGBA_HALF_FLOAT = 14;\r\nBaseTexture.FORMAT_R32G32B32A32 = 15;\r\nBaseTexture.FORMAT_DEPTH_16 = 0;\r\nBaseTexture.FORMAT_STENCIL_8 = 1;\r\nBaseTexture.FORMAT_DEPTHSTENCIL_16_8 = 2;\r\nBaseTexture.FORMAT_DEPTHSTENCIL_NONE = 3;\r\n",
  "references": [
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/layagl/LayaGL.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/webgl/WebGLContext.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/resource/Bitmap.ts",
    "D:/MySpace/Projects/NextPresent/PresentNext/libs/laya/resource/TextureFormat.ts"
  ]
}
